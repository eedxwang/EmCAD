#line 2 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model_lexer.cpp"

#line 4 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer model_create_buffer
#define yy_delete_buffer model_delete_buffer
#define yy_flex_debug model_flex_debug
#define yy_init_buffer model_init_buffer
#define yy_flush_buffer model_flush_buffer
#define yy_load_buffer_state model_load_buffer_state
#define yy_switch_to_buffer model_switch_to_buffer
#define yyin modelin
#define yyleng modelleng
#define yylex modellex
#define yylineno modellineno
#define yyout modelout
#define yyrestart modelrestart
#define yytext modeltext
#define yywrap modelwrap
#define yyalloc modelalloc
#define yyrealloc modelrealloc
#define yyfree modelfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE modelrestart(modelin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int modelleng;

extern FILE *modelin, *modelout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up modeltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up modeltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via modelrestart()), so that the user can continue scanning by
	 * just pointing modelin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when modeltext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int modelleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow modelwrap()'s to do buffer switches
 * instead of setting up a fresh modelin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void modelrestart (FILE *input_file  );
void model_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE model_create_buffer (FILE *file,int size  );
void model_delete_buffer (YY_BUFFER_STATE b  );
void model_flush_buffer (YY_BUFFER_STATE b  );
void modelpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void modelpop_buffer_state (void );

static void modelensure_buffer_stack (void );
static void model_load_buffer_state (void );
static void model_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER model_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE model_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE model_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE model_scan_bytes (yyconst char *bytes,int len  );

void *modelalloc (yy_size_t  );
void *modelrealloc (void *,yy_size_t  );
void modelfree (void *  );

#define yy_new_buffer model_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        modelensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            model_create_buffer(modelin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        modelensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            model_create_buffer(modelin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define modelwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *modelin = (FILE *) 0, *modelout = (FILE *) 0;

typedef int yy_state_type;

extern int modellineno;

int modellineno = 1;

extern char *modeltext;
#define yytext_ptr modeltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up modeltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	modelleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[515] =
    {   0,
        2,    2,   14,   14,    0,    0,   80,   79,    9,   12,
       79,   10,    4,    2,    2,    1,    1,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,    7,    8,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,    6,    5,   79,    9,   79,   14,   16,
        0,    9,    0,   13,    0,   10,   11,   10,    2,    1,
        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   15,   14,
       16,    0,    0,   10,    0,    3,    0,    0,    0,    0,
        0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   34,   66,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
        0,   22,   22,   10,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   42,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   19,    0,    0,    0,
       70,   48,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
        0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   20,    0,    0,   28,    0,
        0,    0,    0,    0,   78,    0,    0,    0,    0,    0,
        0,    0,   72,   60,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   77,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   17,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,   71,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   65,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   76,   18,
       37,    0,    0,    0,    0,    0,    0,    0,   40,    0,
        0,    0,    0,   41,    0,    0,    0,    0,    0,    0,

        0,   75,    0,    0,    0,   52,    0,    0,    0,    0,
        0,   61,    0,    0,    0,   69,    0,    0,    0,    0,
       35,    0,    0,    0,   36,    0,    0,   25,    0,    0,
        0,    0,    0,   43,   39,   74,    0,   58,    0,   47,
        0,   59,   67,    0,    0,   51,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,   24,    0,    0,   63,
       64,    0,   50,    0,    0,    0,   49,    0,    0,    0,
       32,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,   68,   27,    0,   54,    0,    0,   23,    0,    0,
        0,    0,    0,    0,    0,   26,    0,   55,   56,   57,

        0,    0,    0,    0,   73,    0,    0,    0,    0,   31,
        0,   33,   38,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    7,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,    1,    1,    1,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   21,   22,   23,   24,   25,   26,
       21,   27,   28,   29,   30,   31,   32,   21,   21,   21,
       33,    1,   34,   21,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   21,   21,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   21,   56,
       57,   58,   59,   21,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    2,    1,    1,    1,    1,    1,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    3,    4,    4,    4,    4,    4,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1
    } ;

static yyconst flex_int16_t yy_base[523] =
    {   0,
        0,    0,   60,  120,   67,   69,  659,  606,   77,  660,
       78,   80,  605,   64,   91,   99,  131,  604,   29,   40,
      117,  138,   66,   34,   39,   43,   59,   44,   60,  111,
      110,  129,  113,   61,  603,  602,  120,   62,  118,  106,
      178,   54,   85,  164,  121,  135,  160,  146,  143,  151,
      149,  153,  154,  601,  600,  660,  649,  646,    0,    0,
      609,  646,  643,  660,  173,  643,  660,  182,  207,  210,
      223,  225,  598,    0,  185,  590,  592,  162,  625,  600,
      600,  228,  232,  617,  594,  592,  587,  582,  579,  586,
      609,  578,  608,  604,  583,  576,  205,  577,  595,  585,

      568,  580,  577,  573,  199,  567,  570,  581,  564,  575,
      570,  565,  576,  556,  563,  561,  555,  555,  189,  560,
      561,  552,  550,  557,  565,  551,  554,  594,  660,    0,
        0,  544,  211,  221,  558,    0,  555,  547,  555,  543,
      552,  660,  554,  544,  560,  548,  546,  537,  544,  543,
      542,  546,  660,  660,  551,  535,  537,  528,  528,  527,
      558,  533,  532,  526,  518,  530,  520,  518,  530,  518,
      517,  224,  513,  523,  514,  513,  523,  516,  510,  516,
      512,  506,  660,  513,  510,  507,  514,  505,  501,  507,
      492,  660,  541,  541,  498,  496,  502,  486,  491,  484,

      483,  496,  519,  660,  660,  483,  482,  487,  505,  228,
      505,  476,  492,  479,  475,  474,  660,  483,  505,  482,
      660,  660,  470,  492,  482,  479,  502,  468,  470,  460,
      489,  473,  496,  459,  456,  469,  456,  479,  454,  660,
      460,  451,  449,  462,  448,  660,  453,  444,  460,  460,
      451,  447,  455,  447,  453,  660,  437,  448,  660,  440,
      440,  450,  438,  436,  660,  430,  444,  430,  427,  426,
      434,  423,  660,  660,  428,  430,  420,  433,  421,  423,
      430,  415,  414,  427,  422,  422,  410,  419,  422,  421,
      413,  406,  414,  660,  412,  416,  416,  409,  402,  399,

      411,  397,  396,  395,  660,  411,  395,  390,  391,  399,
      397,  401,  400,  386,  386,  385,  389,  391,  389,  393,
      394,  386,  390,  382,  381,  381,  388,  380,  388,  660,
      385,  386,  380,  373,  660,  383,  370,  381,  364,  375,
      357,  356,  388,  364,  366,  396,  357,  369,  353,  369,
      364,  350,  348,  350,  373,  347,  374,  373,  356,  356,
      350,  354,  339,  338,  343,  338,  350,  660,  334,  333,
      338,  331,  338,  338,  328,  333,  332,  325,  660,  660,
      348,  362,  339,  321,  318,  324,  327,  330,  660,  318,
      317,  315,  320,  660,  325,  340,  309,  308,  322,  320,

      320,  660,  314,  321,  303,  660,  298,  310,  317,  299,
      307,  660,  303,  291,  310,  660,  303,  289,  297,  298,
      660,  299,  288,  303,  660,  296,  295,  660,  298,  285,
      282,  289,  288,  660,  660,  660,  278,  660,  274,  660,
      276,  660,  660,  275,  289,  660,  288,  279,  277,  278,
      284,  270,  275,  660,  285,  284,  660,  275,  272,  660,
      660,  273,  660,  272,  271,  268,  660,  266,  272,  272,
      660,  253,  270,  261,  262,  254,  660,  252,  251,  250,
      262,  660,  660,  257,  660,  284,  220,  660,  219,  214,
      213,  212,  220,  213,  215,  660,  226,  660,  660,  660,

      208,  216,  210,  209,  660,  207,  214,  214,  202,  660,
      192,  660,  660,  660,  274,  278,  282,  286,  290,  292,
      296,  113
    } ;

static yyconst flex_int16_t yy_def[523] =
    {   0,
      514,    1,  515,  515,  516,  516,  514,  514,  514,  514,
      517,  518,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  519,  520,  521,
      514,  514,  517,  514,  517,  518,  514,  518,  514,  514,
      514,  514,  514,  522,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  519,  514,  520,
      521,  514,  517,  518,  514,  522,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  517,  518,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,    0,  514,  514,  514,  514,  514,  514,
      514,  514
    } ;

static yyconst flex_int16_t yy_nxt[721] =
    {   0,
        8,    9,   10,   11,   12,    8,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
        8,   27,   28,   29,    8,   30,    8,   31,   32,   33,
        8,   34,   35,   36,    8,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,    8,    8,
       50,   51,   52,    8,   53,    8,    8,    8,   54,   55,
       56,   57,   56,   58,   56,   56,   56,   56,   57,   56,
       57,   56,   69,   70,   70,   91,   76,   84,   62,   71,
       61,   64,   67,   77,   85,   61,   86,   78,   87,   88,
       61,   61,   56,   56,   61,   61,  101,  104,   89,   92,

       72,   72,   90,   71,  110,   61,   71,   69,   70,   70,
       61,   61,   61,   61,   71,   61,  136,   61,   56,   56,
       56,   57,   56,   58,   56,   56,   56,   56,   61,   65,
       71,   68,   79,   93,   73,  111,   61,   94,   71,   69,
       70,   70,   61,   82,   97,   82,   71,   83,   83,  106,
       61,   98,   56,   56,   74,   99,   80,   61,   95,  100,
       81,   61,   61,   96,   61,  105,  102,  114,   61,   61,
       71,   61,   61,  116,  115,  103,   64,  112,   56,   56,
       61,  120,   61,   82,   67,   82,   61,   83,   83,   61,
      122,  107,  113,  121,   61,  117,  124,   61,  123,  118,

       61,  127,   61,  125,   61,   61,  108,  140,  141,  126,
      182,   61,  133,  119,   64,   61,   72,   72,   69,   70,
       70,  134,   71,   67,  132,   71,  109,  158,   82,   61,
       82,  513,   83,   83,   72,   72,  137,   83,   83,  183,
       71,   83,   83,  167,  168,  228,   71,  261,  512,   71,
      262,  511,  510,  159,  509,  508,  507,  263,  264,  506,
      505,  504,  503,  193,   71,  502,  501,  229,  500,  499,
      498,  497,  496,  194,   59,   59,   59,   59,   60,   60,
       60,   60,   63,   63,   63,   63,   66,   66,   66,   66,
      128,  128,  128,  128,  130,  130,  131,  495,  131,  131,

      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,

      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,

      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,   67,   64,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  192,  129,  191,  190,

      189,  188,  187,  186,  185,  184,  181,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  166,
      165,  164,  163,  162,  161,  160,  157,  156,  155,  154,
      153,  152,  151,  150,  149,  148,  147,  146,  145,  144,
      143,  142,  139,  138,  135,   67,   64,   62,  132,  129,
       62,   61,   61,   61,   61,   75,   61,   61,  514,    7,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514
    } ;

static yyconst flex_int16_t yy_chk[721] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
        6,    6,   14,   14,   14,   28,   19,   23,    9,   14,
       19,   11,   12,   20,   24,   24,   25,   20,   26,   26,
       25,   20,    3,    3,   26,   28,   34,   38,   27,   29,

       15,   15,   27,   14,   42,   42,   15,   16,   16,   16,
       27,   29,   34,   38,   16,   14,  522,   23,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    9,   11,
       15,   12,   21,   30,   15,   43,   43,   30,   16,   17,
       17,   17,   15,   22,   32,   22,   17,   22,   22,   40,
       16,   32,    4,    4,   16,   32,   21,   40,   31,   33,
       21,   31,   30,   31,   33,   39,   37,   45,   21,   39,
       17,   37,   45,   47,   46,   37,   65,   44,    4,    4,
       32,   48,   17,   41,   68,   41,   46,   41,   41,   22,
       50,   41,   44,   49,   49,   47,   51,   48,   50,   47,

       51,   53,   50,   52,   52,   53,   41,   78,   78,   52,
      119,   47,   65,   47,  133,   44,   69,   69,   70,   70,
       70,   68,   69,  134,   75,   70,   41,   97,   71,   41,
       71,  511,   71,   71,   72,   72,   75,   82,   82,  119,
       72,   83,   83,  105,  105,  172,   69,  210,  509,   70,
      210,  508,  507,   97,  506,  504,  503,  210,  210,  502,
      501,  497,  495,  133,   72,  494,  493,  172,  492,  491,
      490,  489,  487,  134,  515,  515,  515,  515,  516,  516,
      516,  516,  517,  517,  517,  517,  518,  518,  518,  518,
      519,  519,  519,  519,  520,  520,  521,  486,  521,  521,

      484,  481,  480,  479,  478,  476,  475,  474,  473,  472,
      470,  469,  468,  466,  465,  464,  462,  459,  458,  456,
      455,  453,  452,  451,  450,  449,  448,  447,  445,  444,
      441,  439,  437,  433,  432,  431,  430,  429,  427,  426,
      424,  423,  422,  420,  419,  418,  417,  415,  414,  413,
      411,  410,  409,  408,  407,  405,  404,  403,  401,  400,
      399,  398,  397,  396,  395,  393,  392,  391,  390,  388,
      387,  386,  385,  384,  383,  382,  381,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,

      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  334,
      333,  332,  331,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  272,  271,  270,  269,
      268,  267,  266,  264,  263,  262,  261,  260,  258,  257,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  245,

      244,  243,  242,  241,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  220,  219,  218,  216,  215,  214,  213,  212,  211,
      209,  208,  207,  206,  203,  202,  201,  200,  199,  198,
      197,  196,  195,  194,  193,  191,  190,  189,  188,  187,
      186,  185,  184,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      152,  151,  150,  149,  148,  147,  146,  145,  144,  143,
      141,  140,  139,  138,  137,  135,  132,  128,  127,  126,

      125,  124,  123,  122,  121,  120,  118,  117,  116,  115,
      114,  113,  112,  111,  110,  109,  108,  107,  106,  104,
      103,  102,  101,  100,   99,   98,   96,   95,   94,   93,
       92,   91,   90,   89,   88,   87,   86,   85,   84,   81,
       80,   79,   77,   76,   73,   66,   63,   62,   61,   58,
       57,   55,   54,   36,   35,   18,   13,    8,    7,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int model_flex_debug;
int model_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *modeltext;
#line 1 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
/*
 * This file is part of the EmCAD program which constitutes the client
 * side of an electromagnetic modeler delivered as a cloud based service.
 * 
 * Copyright (C) 2015  Walter Steffe
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#line 22 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
 
#include <stdio.h>
#include <string.h>
#include <model_parser.hpp>
#include<ListUtils.h>
#include <Message.h>

extern char modelFileName[256];
int modelLineNum=1;

typedef struct {
  char fileName[256];
  int lineNum;
} fileState;

struct FileStack{
 DB::List_T *stack;
 FileStack(){
  stack=DB::List_Create(2, 2, sizeof(fileState *));
 }
 ~FileStack(){
   fileState *st;
   for(int i=0; i<List_Nbr(stack); i++){
    List_Read(stack,i,&st);
    delete(st);
   }

   DB::List_Delete(stack);
 }
 void push(char *fileName, int lineNum){
  fileState *st;
  st=new fileState();
  strcpy(st->fileName,fileName);
  st->lineNum=lineNum;
  DB::List_Add(stack,&st);
 }
 void pop(char *fileName, int &lineNum){
  fileState *st;
  DB::List_Pop(stack,&st);
  strcpy(fileName,st->fileName);
  lineNum=st->lineNum;
  delete(st);
 }
};

FileStack fStack;
extern int changedBinFile;





#line 81 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;
#line 888 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model_lexer.cpp"

#define INITIAL 0
#define expectID 1
#define incl 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int modellex_destroy (void );

int modelget_debug (void );

void modelset_debug (int debug_flag  );

YY_EXTRA_TYPE modelget_extra (void );

void modelset_extra (YY_EXTRA_TYPE user_defined  );

FILE *modelget_in (void );

void modelset_in  (FILE * in_str  );

FILE *modelget_out (void );

void modelset_out  (FILE * out_str  );

int modelget_leng (void );

char *modelget_text (void );

int modelget_lineno (void );

void modelset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int modelwrap (void );
#else
extern int modelwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( modeltext, modelleng, 1, modelout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( modelin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( modelin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, modelin))==0 && ferror(modelin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(modelin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int modellex (void);

#define YY_DECL int modellex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after modeltext and modelleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 90 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"


#line 1080 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model_lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! modelin )
			modelin = stdin;

		if ( ! modelout )
			modelout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			modelensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				model_create_buffer(modelin,YY_BUF_SIZE );
		}

		model_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of modeltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 515 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 514 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modellval.ival = atoi(modeltext); return INTEGER;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modellval.fval = (double)atof(modeltext); return FLOATING;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ sscanf(modeltext, "0x%x", &modellval.ival); return INTEGER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ','; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return '}'; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 98 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return '{'; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 99 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return '['; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ']'; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 106 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modelLineNum++;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 107 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modelLineNum++;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 109 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modeltext[modelleng-1] = '\0'; modellval.sval = &modeltext[1]; return STRING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 110 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ /*puts back ID onto the input stream as a string enclosed in '"' */
          			  /* modeltext is copied because unput() trashes modeltext */
					int i; 
                                        char *yycopy = new char [ strlen(modeltext) + 1 ];
                                        strcpy(yycopy, modeltext);
          				unput( '"' );
          				for ( i = modelleng - 1; i >= 0; --i ) unput( yycopy[i] );
          				unput( '"' );
          				delete [] yycopy ;
				}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 120 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modeltext[modelleng-1] = '\0'; modellval.sval = &modeltext[1];
                                  BEGIN(INITIAL); return NAME;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ /* got the include file name */
        if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
            {
            fprintf( stderr, "Includes nested too deeply" );
            exit( 1 );
            }

        include_stack[include_stack_ptr++] =
            YY_CURRENT_BUFFER;

        fStack.push(modelFileName,modelLineNum);
        strcpy(modelFileName, modeltext);
        changedBinFile=1;
        modelLineNum =1;

        modelin = fopen( modeltext, "r" );

        if(!modelin){
         DB::Msg(ERROR, "Cannot open file %s\n", modeltext);
	 return 0;
        }

        model_switch_to_buffer(model_create_buffer(modelin,YY_BUF_SIZE ) );

        BEGIN(INITIAL);
        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(expectID):
case YY_STATE_EOF(incl):
#line 151 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{
        if ( --include_stack_ptr < 0 )
            {
             yyterminate();
            }

        else
            {
             fStack.pop(modelFileName,modelLineNum);

             model_delete_buffer(YY_CURRENT_BUFFER );
             model_switch_to_buffer(include_stack[include_stack_ptr] );
            }
        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 168 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return IMPORT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 170 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{BEGIN(incl);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 173 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modellval.ival = 1; return INTEGER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 174 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ modellval.ival = 0; return INTEGER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 176 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ BEGIN(expectID); return DEF;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 177 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return SET;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 178 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MWM_MATERIAL; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 179 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MWM_VOLUME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 180 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MWM_UNITS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 181 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MWM_INVARIANT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 182 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ASSEMBLYTYPE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 183 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return LEVEL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 184 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tDIELECTRIC; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 185 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tHOLE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 186 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return DEFAULTBC; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 187 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return CIRCUITNAME; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 188 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tBOUNDARYCONDITION; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 189 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tNET; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 190 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tCOMPONENT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 191 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tINTERFACE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 192 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tASSEMBLY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 193 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return SURFACERESISTANCE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 194 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tWAVEGUIDE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 195 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tLINEPORT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 196 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tSPLITTER; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 197 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tGRID; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 198 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return tUNDEFINED; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 199 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return NAME; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 200 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return VOLTYPE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 201 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return LENGTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 202 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return FREQUENCY; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 203 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return BAND; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 204 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return RESISTANCE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 205 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return EPSLORENTZ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 206 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MULORENTZ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 207 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return EPSILONR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 208 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MUR; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 209 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ECONDUCTIVITY; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 210 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ECONDUCTIVITY; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 211 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return HCONDUCTIVITY; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 212 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return HCONDUCTIVITY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 213 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ETANDELTA; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 214 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return HTANDELTA; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 215 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return COLOR; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 216 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MATERIAL; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 217 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return TEMPORTSNUM; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 218 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return TEPORTSNUM; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 219 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return TMPORTSNUM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 220 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return GRIDNUM; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 221 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return PML; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 222 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return INVARIANT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 223 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return TRANSLATION; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 224 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ROTATION; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 225 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return AXIS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 226 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ORIGIN; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 227 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return ANGLE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 228 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return MESHREFINEMENT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 229 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return COMPSOLID; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 230 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return DISABLED; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 231 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return VOLUMES; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 232 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{ return SOLID; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 233 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
{
	   int c=0, bigBracket;
	   while ((c=yyinput()) != '[' && c != EOF) if (c== '\n') modelLineNum++;

	   bigBracket =1;
	   while (bigBracket && (c=yyinput())!=EOF) {
	      switch(c) {
		 case ']' :  bigBracket--;   break;
		 case '[' :  bigBracket++;   break;
		 case '\n':  modelLineNum++;    break;
		 case '#'  : /* skip comment */ {
		    do {c = yyinput();} while (c != '\n');
		    modelLineNum++;
             	 }
	      }
	   } 

	   while ((c=yyinput()) != '{' && c != EOF) if (c== '\n') modelLineNum++;

	   bigBracket =1;
	   while (bigBracket && (c=yyinput())!=EOF) {
	      switch(c) {
		 case '}' :  bigBracket--;   break;
		 case '{' :  bigBracket++;   break;
		 case '\n':  modelLineNum++;    break;
		 case '#'  : /* skip comment */ {
		    do {c = yyinput();} while (c != '\n');
		    modelLineNum++;
             	 }
	      }
	   } 
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 268 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"
ECHO;
	YY_BREAK
#line 1643 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed modelin at a new source and called
			 * modellex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = modelin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( modelwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * modeltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of modellex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					modelrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			modelrestart(modelin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) modelrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 515 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 515 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 514);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up modeltext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					modelrestart(modelin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( modelwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve modeltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void modelrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        modelensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            model_create_buffer(modelin,YY_BUF_SIZE );
	}

	model_init_buffer(YY_CURRENT_BUFFER,input_file );
	model_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void model_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		modelpop_buffer_state();
	 *		modelpush_buffer_state(new_buffer);
     */
	modelensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	model_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (modelwrap()) processing, but the only time this flag
	 * is looked at is after modelwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void model_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	modelin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE model_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) modelalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in model_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) modelalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in model_create_buffer()" );

	b->yy_is_our_buffer = 1;

	model_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with model_create_buffer()
 * 
 */
    void model_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		modelfree((void *) b->yy_ch_buf  );

	modelfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a modelrestart() or at EOF.
 */
    static void model_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	model_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then model_init_buffer was _probably_
     * called from modelrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void model_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		model_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void modelpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	modelensure_buffer_stack();

	/* This block is copied from model_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from model_switch_to_buffer. */
	model_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void modelpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	model_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		model_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void modelensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)modelalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in modelensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)modelrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in modelensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE model_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) modelalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in model_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	model_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to modellex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       model_scan_bytes() instead.
 */
YY_BUFFER_STATE model_scan_string (yyconst char * yystr )
{
    
	return model_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to modellex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE model_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) modelalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in model_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = model_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in model_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up modeltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		modeltext[modelleng] = (yy_hold_char); \
		(yy_c_buf_p) = modeltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		modelleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int modelget_lineno  (void)
{
        
    return modellineno;
}

/** Get the input stream.
 * 
 */
FILE *modelget_in  (void)
{
        return modelin;
}

/** Get the output stream.
 * 
 */
FILE *modelget_out  (void)
{
        return modelout;
}

/** Get the length of the current token.
 * 
 */
int modelget_leng  (void)
{
        return modelleng;
}

/** Get the current token.
 * 
 */

char *modelget_text  (void)
{
        return modeltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void modelset_lineno (int  line_number )
{
    
    modellineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see model_switch_to_buffer
 */
void modelset_in (FILE *  in_str )
{
        modelin = in_str ;
}

void modelset_out (FILE *  out_str )
{
        modelout = out_str ;
}

int modelget_debug  (void)
{
        return model_flex_debug;
}

void modelset_debug (int  bdebug )
{
        model_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from modellex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    modelin = stdin;
    modelout = stdout;
#else
    modelin = (FILE *) 0;
    modelout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * modellex_init()
     */
    return 0;
}

/* modellex_destroy is for both reentrant and non-reentrant scanners. */
int modellex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		model_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		modelpop_buffer_state();
	}

	/* Destroy the stack itself. */
	modelfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * modellex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *modelalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *modelrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void modelfree (void * ptr )
{
	free( (char *) ptr );	/* see modelrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 268 "/home/walter/MwCAD/EmCAD/EmCAD/src/DataBase/model.l"




void SetInputFile(FILE *fp)
{
  modelLineNum = 1;
  modelrestart(fp);
}



